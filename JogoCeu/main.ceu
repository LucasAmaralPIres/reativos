#include "c.ceu"
#include "sdl/sdl.ceu"

var&? SDL_Init sdl =
    spawn SDL_Init("Joguinho", 800,600, SDL_Color(0xFF,0xFF,0xFF,0xFF));

code/tight Intersects (var& SDL_Rect rct1, var& SDL_Rect rct2) -> bool
do
    escape rct1.x+rct1.w/2 >= rct2.x-rct2.w/2 and
           rct1.x-rct1.w/2 <= rct2.x+rct2.w/2;
end

watching sdl do

    var& SDL_Open_Image img_bird = spawn SDL_Open_Image(&sdl!.ren, "Bird.png");	
    var& SDL_Open_Image img_cloud = spawn SDL_Open_Image(&sdl!.ren, "Cloud.png");
    var& SDL_Open_Image img_bg = spawn SDL_Open_Image(&sdl!.ren, "BG.png");
    var& SDL_Open_Image img_sol = spawn SDL_Open_Image(&sdl!.ren, "Sol.png");
    var& SDL_Open_Image img_p11 = spawn SDL_Open_Image(&sdl!.ren, "PLayer1.1.png");
    var& SDL_Open_Image img_w1 = spawn SDL_Open_Image(&sdl!.ren, "w1.png");
    var& SDL_Open_Image img_p21 = spawn SDL_Open_Image(&sdl!.ren, "PLayer2.1.png");
    var& SDL_Open_Image img_w2 = spawn SDL_Open_Image(&sdl!.ren, "w2.png");

//CLOUD
    code/await Cloud (var SDL_Rect r, var float vx) -> FOREVER do
	var float x = -r.w;
        par do
            var int dt;
            every dt in SDL_DT do
                x = x + vx*dt/1000;
                if x > 800 then
                    x = -r.w;
		    vx = 10+_rand()%50;
                end
            end
        with
            every SDL_REDRAW do
		r.x = x as int;
		_SDL_RenderCopy(&&outer.sdl!.ren, &&outer.img_cloud.tex.tex, null,&&r as _SDL_Rect&&);
            end
        end
    end

//BIRD
    code/await Bird (void) -> FOREVER do
	var int vx = 90+_rand()%70;
	var int y = 90+_rand()%70;
      	var int x = 0;
	var SDL_Rect rct = val SDL_Rect(x,y, 30,30);
	par do
            var int dt;
            every dt in SDL_DT do
                rct.x = rct.x + vx*dt/1000;
                if rct.x > 800 then
			rct.x = -20;
			vx = 90+_rand()%70;
                end
            end
        with
            every SDL_REDRAW do
           		_SDL_RenderCopy(&&outer.sdl!.ren, &&outer.img_bird.tex.tex, null,&&rct as _SDL_Rect&&);
            end
        end
    end

/*//TREE
	code/await Tree (void) -> FOREVER do
		var SDL_Rect rct = val SDL_Rect(100,390, 150,200);
        loop do
		    every SDL_REDRAW do
            	_SDL_RenderCopy(&&outer.sdl!.ren, &&outer.img_tree.tex.tex, null,&&rct as _SDL_Rect&&);
			end
		end		
	end
*/
//BACKGROUNG
    code/await Background (void) -> FOREVER do
	var SDL_Rect rct = val SDL_Rect(0,0, 800,600);
        loop do
	    every SDL_REDRAW do
            	_SDL_RenderCopy(&&outer.sdl!.ren, &&outer.img_bg.tex.tex, null,&&rct as _SDL_Rect&&);
	    end
	end		
    end

//SOL
     code/await Sol (void) -> FOREVER do
	var SDL_Rect rct = val SDL_Rect(0,0, 150,150);
        loop do
	    every SDL_REDRAW do
        	_SDL_RenderCopy(&&outer.sdl!.ren, &&outer.img_sol.tex.tex, null,&&rct as _SDL_Rect&&);
	    end
	end		
    end

//PLAYER1
    code/await Player1 (void) -> (var SDL_Rect r, event int go_collided) -> FOREVER do
        var float x = 100 - 20/2;
        var float y = 590-70;
	var float cor1 = 255;
	var float cor2 = 0;
	var int k = 0;
	var SDL_Rect g = val SDL_Rect(200,100,400,200);
        r = val SDL_Rect(0,0, 70,70);
	var SDL_Rect cont_vida = val SDL_Rect(0,0,100,9);
	var SDL_Rect vida = val SDL_Rect(0,0, 101,7);
        par do
            var int dt;
            every dt in SDL_DT do
        	if x < 0 then
			x = 0;
		end                
            end
        with
	    loop do
	            par/or do
        	        loop do
				par/or do
					k = await go_collided;               
					x = x - 100;
					if(k == 1) then
						cont_vida.w = cont_vida.w-10;
						if cor2 <212 then
							cor1 = cor1 - 255/6;
							cor2 = cor2 + 255/6;
						end
					end
				with
					var _SDL_KeyboardEvent&& key;
                    			key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_a;
                    			x = x - 18;
					await SDL_KEYUP;
				end
				if cont_vida.w == 0 then
					var _SDL_KeyboardEvent&& key3;
               		  		key3 = await SDL_KEYDOWN until key3:keysym.sym==_SDLK_r;
					cor1 = 255;
					cor2 = 0;
				        x = 100 - 20/2;
				        y = 590-70;
					cont_vida.w = 100;
					break;						
				end
	                end
        	  with
                	loop do
			    if cont_vida.w != 0 then
		                    var _SDL_KeyboardEvent&& key;
        		            key = await SDL_KEYDOWN until key:keysym.sym== _SDLK_d;
				    if cont_vida.w != 0 then			    
					x = x + 24;
				    end
			    	    await SDL_KEYUP;
			    else
				await FOREVER;
		    	    end
                  	end
          	end
	   end
        with
            every SDL_REDRAW do
                r.x = x as int;
                r.y = y as int;
        	_SDL_RenderCopy(&&outer.sdl!.ren, &&outer.img_p11.tex.tex, null,&&r as _SDL_Rect&&);
                _SDL_SetRenderDrawColor(&&outer.sdl!.ren, 0x00,0x00,0x00,0xFF);
                cont_vida.x = (x- (cont_vida.w/2) +10) as int;
                cont_vida.y = (y-15) as int;                
		_SDL_RenderFillRect(&&outer.sdl!.ren, (&&cont_vida as _SDL_Rect&&));
		cor1 = cor1 as int;
		cor2 = cor2 as int;
                _SDL_SetRenderDrawColor(&&outer.sdl!.ren, cor2,cor1,0x00,0xFF);
		if cont_vida.w != 0 then
			vida.w = cont_vida.w-2;
		else
			vida.w = 0;
		end
       	        vida.x = (x-(vida.w/2) +10) as int;
               	vida.y = (y-14) as int;			
                _SDL_RenderFillRect(&&outer.sdl!.ren, (&&vida as _SDL_Rect&&));
		if (cont_vida.w == 0) then
	        	_SDL_RenderCopy(&&outer.sdl!.ren, &&outer.img_w2.tex.tex, null,&&g as _SDL_Rect&&);
		end
            end
	with
		loop do
			var _SDL_KeyboardEvent&& key3;
        	   	key3 = await SDL_KEYDOWN until key3:keysym.sym==_SDLK_r;
			cor1 = 255;
			cor2 = 0;
			x = 100 - 20/2;
			y = 590-70;
			cont_vida.w = 100;
		end
        end
    end

//Player2
    code/await Player2 (void) -> (var SDL_Rect r, event int go_collided) -> FOREVER do
        var float x = 700 - 20/2;
        var float y = 590-70;
	var float cor1 = 255;
	var float cor2 = 0;
	var int k = 0;
	var SDL_Rect g = val SDL_Rect(200,100,400,200);
        r = val SDL_Rect(0,0, 70,70);
	var SDL_Rect cont_vida = val SDL_Rect(0,0,100,9);
	var SDL_Rect vida = val SDL_Rect(0,0, 101,7);
        par do
            var int dt;
            every dt in SDL_DT do
		if x >= 720 then
			x = 720;
		end
            end
        with
	    loop do
	            par/or do
        	        loop do
				par/or do
					k = await go_collided;               
					x = x + 100;
					if(k == 1) then
						cont_vida.w = cont_vida.w-10;
						if cor2 <212 then
							cor1 = cor1 - 255/6;
							cor2 = cor2 + 255/6;
						end
					end
				with
					var _SDL_KeyboardEvent&& key;
                    			key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_LEFT;
                    			x = x - 18;
					await SDL_KEYUP;
				end
				if cont_vida.w == 0 then
					var _SDL_KeyboardEvent&& key3;
               		  		key3 = await SDL_KEYDOWN until key3:keysym.sym==_SDLK_r;
					cor1 = 255;
					cor2 = 0;
        				x = 700 - 20/2;
       					y = 590-70;
					cont_vida.w = 100;
					break;						
				end
	                end
        	  with
                	loop do
			    if cont_vida.w != 0 then
		                    var _SDL_KeyboardEvent&& key;
        		            key = await SDL_KEYDOWN until key:keysym.sym== _SDLK_RIGHT;
				    if cont_vida.w != 0 then			    
					x = x + 24;
				    end
			    	    await SDL_KEYUP;
			    else
				await FOREVER;
		    	    end
                  	end
          	end
	   end
        with
            every SDL_REDRAW do
                r.x = x as int;
                r.y = y as int;
        	_SDL_RenderCopy(&&outer.sdl!.ren, &&outer.img_p21.tex.tex, null,&&r as _SDL_Rect&&);
                _SDL_SetRenderDrawColor(&&outer.sdl!.ren, 0x00,0x00,0x00,0xFF);
                cont_vida.x = (x - (cont_vida.w/2) +50) as int;
                cont_vida.y = (y-15) as int;                
		_SDL_RenderFillRect(&&outer.sdl!.ren, (&&cont_vida as _SDL_Rect&&));
		cor1 = cor1 as int;
		cor2 = cor2 as int;
                _SDL_SetRenderDrawColor(&&outer.sdl!.ren, cor2,cor1,0x00,0xFF);
		if cont_vida.w != 0 then
			vida.w = cont_vida.w-2;
		else
			vida.w = 0;
		end
                vida.x = (x-(vida.w/2) +50) as int;
                vida.y = (y-14) as int;
                _SDL_RenderFillRect(&&outer.sdl!.ren, (&&vida as _SDL_Rect&&));
		if (cont_vida.w == 0) then
	        	_SDL_RenderCopy(&&outer.sdl!.ren, &&outer.img_w1.tex.tex, null,&&g as _SDL_Rect&&);
		end
            end
	with
		loop do
			var _SDL_KeyboardEvent&& key3;
        	   	key3 = await SDL_KEYDOWN until key3:keysym.sym==_SDLK_r;
			cor1 = 255;
			cor2 = 0;
    			x = 700 - 20/2;
			y = 590-70;
			cont_vida.w = 100;
		end
	end
    end

    native/pre do
        ##include <time.h>
    end
    _srand(_time(null));


    spawn Background();
    spawn Sol();
    pool[3] Cloud clouds;
    var int i;
    loop i in [1 -> 3] do
        var int w = 50 + _rand()%200;
        var int h = 20 + _rand()%50;
        var int y = h + _rand()%200;
        spawn Cloud(SDL_Rect(0,y,w,h), 10+_rand()%50) in clouds;
    end

    pool[4] Bird birds;
    loop i in [1 -> 4] do
        spawn Bird() in birds;
    end

    pool[1] Player1 player1;
    pool[1] Player2 player2;
    spawn Player1() in player1;
    spawn Player2() in player2;

    loop do
	var _SDL_KeyboardEvent&& key1; 	
	key1 = await SDL_KEYDOWN until key1:keysym.sym==_SDLK_LEFT or key1:keysym.sym==_SDLK_d;
	var&? Player1 p1;
       	loop p1 in player1 do
		var&? Player2 p2;
                loop p2 in player2 do
                	if (&&p1!.r as usize)<(&&p2!.r as usize) and (call Intersects(&p1!.r,&p2!.r)) then
				if key1:keysym.sym==_SDLK_LEFT then
					//var _SDL_KeyboardEvent&& key2;
					par/or do
						var _SDL_KeyboardEvent&& key2;
						key2 = await SDL_KEYDOWN until key2:keysym.sym==_SDLK_d;
						emit p1!.go_collided(0);
						emit p2!.go_collided(0);	
					with
						await 150ms;
						emit p1!.go_collided(1);
						emit p2!.go_collided(0);
					end
				else/if key1:keysym.sym==_SDLK_d then
					par/or do
						var _SDL_KeyboardEvent&& key2;
						key2 = await SDL_KEYDOWN until key2:keysym.sym==_SDLK_LEFT;
						emit p1!.go_collided(0);
						emit p2!.go_collided(0);	
					with
						await 150ms;
						emit p2!.go_collided(1);
						emit p1!.go_collided(0);
					end
				end
				/*par/or do
				//	await 200ms;
					if key1:keysym.sym==_SDLK_LEFT then
				/*		var _SDL_KeyboardEvent&& key2;
						key2 = await SDL_KEYDOWN until key2:keysym.sym==_SDLK_d;
					end
				//	if key1:keysym.sym==_SDLK_d then
				/*		var _SDL_KeyboardEvent&& key2;
						key2 = await SDL_KEYDOWN until key2:keysym.sym==_SDLK_LEFT;
				//	end
				with
					await 200ms;
				//	if key1:keysym.sym==_SDLK_LEFT then
				/*		emit p1!.go_collided;
					else
						emit p2!.go_collided(1);
				//	end
				end*/
			end
               	end
        end
    end
    /*loop do
	every SDL_DT do
    	    var&? Player1 p1;
       	    loop p1 in player1 do
	        var&? Player2 p2;
                loop p2 in player2 do
                    if (&&p1!.r as usize)<(&&p2!.r as usize)
                        and (call Intersects(&p1!.r,&p2!.r))
                    then
			par/or do
			//	var _SDL_KeyboardEvent&& key1; 	
			//	key1 = await SDL_KEYDOWN until key1:keysym.sym==_SDLK_LEFT;
				emit p2!.go_collided;
		//		await 1s;
            		with
				//var _SDL_KeyboardEvent&& key2; 	
			//	key2 = await SDL_KEYDOWN until key2:keysym.sym==_SDLK_d;
				emit p1!.go_collided;
		//		await 1s;
			end
			//_printf("AQUI");
			//if 
                       // emit p1!.go_collided;
                       // emit p2!.go_collided;
                        break;
               	    end
                end
       	    end
	end
    end*/
    await FOREVER;
end

escape 0;
